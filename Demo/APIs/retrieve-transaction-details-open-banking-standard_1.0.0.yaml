swagger: '2.0'
info:
  title: Retrieve Transaction Details (Open Banking Standard)
  x-ibm-name: retrieve-transaction-details-open-banking-standard
  version: 1.0.0
schemes:
  - https
basePath: /OB-v312/IDBP-v1
produces:
  - application/json
consumes:
  - application/json
security:
  - AppID: []
    AppSecret: []
securityDefinitions:
  # UserOAuthSecurity:
  #   type: oauth2
  #   flow: accessCode
  #   x-ibm-oauth-provider: idbp-accounts-oauth-provider
  #   authorizationUrl: 'https://$(catalog.url)/idbp/account/oauthprov/oauth2/authorize'
  #   tokenUrl: 'https://$(catalog.url)/idbp/account/oauthprov/oauth2/token'
  #   scopes:
  #     account: For Accounts Read APIs
  AppSecret:
    type: apiKey
    name: X-Client-Secret
    in: header
    x-key-type: client_secret
  AppID:
    type: apiKey
    name: X-Client-Id
    in: header
    x-key-type: client_id
x-ibm-configuration:
  enforced: true
  testable: true
  phase: realized
  gateway: datapower-api-gateway
  type: rest
  cors:
    enabled: true
  assembly:
    execute:
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: ($httpVerb() = 'GET' and $operationPath() = '/transactions')
              execute:
                - gatewayscript:
                    version: 2.0.0
                    title: gatewayscript
                    source: "var myAppConsoleLog = console.options({\n 'category': 'app_LC'\n}); \nconst fileName = \"insertCIFAccIdGwysTransactions\"\nmyAppConsoleLog.debug('in ' + fileName);\n\ntry {\n\n    let token_metadata = context.get('oauth.verified_access_token.misc_info')\n    \n    myAppConsoleLog.error('**DEBUG : token_metadata: ', token_metadata)\n    myAppConsoleLog.error('**DEBUG : TYPEOF token_metadata: ', typeof(token_metadata))\n    token_metadata = token_metadata.slice(token_metadata.indexOf('a:') + 2)\n    myAppConsoleLog.error('**DEBUG : token_metadata after slice: ', token_metadata)\n    token_metadata = JSON.parse(token_metadata)\n    myAppConsoleLog.error('**DEBUG : TYPEOF token_metadata: ', typeof(token_metadata))\n    \n    myAppConsoleLog.error('**DEBUG : tokenmeta consentid: ', token_metadata['consentid'])\n    \n    let reqpath = context.get('request.path')\n    let tokenAccId = token_metadata['user_account']\n    let tokenPermissions = token_metadata['permissions']\n    let tokenUsername = token_metadata['username']\n    myAppConsoleLog.error('**DEBUG : tokenmeta reqpath: ', reqpath)\n    myAppConsoleLog.error('**DEBUG : tokenmeta tokenAccId: ', tokenAccId)\n    myAppConsoleLog.error('**DEBUG : tokenmeta tokenUsername: ', tokenUsername)\n    myAppConsoleLog.error('**DEBUG : tokenmeta tokenPermissions: ', tokenPermissions)\n    \n    let backendURL = context.get('ace-all-acc-transaction-by-cif-url')\n    backendURL = backendURL + 'custid=' + tokenUsername\n    myAppConsoleLog.error('**DEBUG : backendURL: ', backendURL)\n    context.set('backendURL',backendURL)\n\n\tcontext.message.header.set('permissions',tokenPermissions);\n\n\tcontext.message.header.set('clientorgname',context.get('client.org.name'))\n\tcontext.message.header.set('clientappname',context.get('client.app.name')) \n\tcontext.message.header.set('clientappid',context.get('client.app.id'))\n} catch (e) {\n    myAppConsoleLog.error('in ' + fileName + ' : ' + e);\n    context.set('custErrMsg','in insertCIFAccIdGwys : ' + e);\n\tcontext.reject('CustomError', 'GWISE500');\n}"
                - invoke:
                    version: 2.0.0
                    title: invoke
                    header-control:
                      type: blacklist
                      values: []
                    parameter-control:
                      type: whitelist
                      values: []
                    timeout: 60
                    verb: keep
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error:
                      - ConnectionError
                    target-url: $(backendURL)
            - condition: >-
                ($httpVerb() = 'GET' and $operationPath() =
                '/accounts/{accountid}/transactions')
              execute:
                - gatewayscript:
                    version: 2.0.0
                    title: gatewayscript
                    source: "var myAppConsoleLog = console.options({\n 'category': 'app_LC'\n});\nconst fileName = \"insertCIFAccIdGwysTransactions\"\nmyAppConsoleLog.debug('in ' + fileName);\n\ntry {\n\n    let token_metadata = context.get('oauth.verified_access_token.misc_info')\n    \n    myAppConsoleLog.error('**DEBUG : token_metadata: ', token_metadata)\n    myAppConsoleLog.error('**DEBUG : TYPEOF token_metadata: ', typeof(token_metadata))\n    token_metadata = token_metadata.slice(token_metadata.indexOf('a:') + 2)\n    myAppConsoleLog.error('**DEBUG : token_metadata after slice: ', token_metadata)\n    token_metadata = JSON.parse(token_metadata)\n    myAppConsoleLog.error('**DEBUG : TYPEOF token_metadata: ', typeof(token_metadata))\n    \n    myAppConsoleLog.error('**DEBUG : tokenmeta consentid: ', token_metadata['consentid'])\n    \n    let reqpath = context.get('request.path')\n    let tokenAccId = token_metadata['user_account']\n    let tokenPermissions = token_metadata['permissions']\n    let tokenUsername = token_metadata['username']\n\n    myAppConsoleLog.error('**DEBUG : tokenmeta reqpath: ', reqpath)\n    myAppConsoleLog.error('**DEBUG : tokenmeta tokenAccId: ', tokenAccId)\n    myAppConsoleLog.error('**DEBUG : tokenmeta tokenUsername: ', tokenUsername)\n    myAppConsoleLog.error('**DEBUG : tokenmeta tokenPermissions: ', tokenPermissions)\n\n    //let reqAccId = reqpath.substr(reqpath.indexOf(\"/accounts/\") + \"/accounts/\".length)\n    //myAppConsoleLog.error('**DEBUG :  reqAccId: ', reqAccId)\n    let reqAccId = context.get('request.parameters.accountid')\n    reqAccId = reqAccId['values'][0]\n    myAppConsoleLog.error('**DEBUG :  reqAccId: ', reqAccId)\n\n    \n    context.message.header.set('clientorgname',context.get('client.org.name'))\n\tcontext.message.header.set('clientappname',context.get('client.app.name')) \n\tcontext.message.header.set('clientappid',context.get('client.app.id'))\n\n    if(tokenAccId.includes(reqAccId)){\n        let backendURL = context.get('ace-one-acc-transaction-url')\n        backendURL = backendURL + 'acctid=' + reqAccId\n        myAppConsoleLog.error('**DEBUG : backendURL: ', backendURL)\n        context.set('backendURL',backendURL)\n        context.message.header.set('permissions',tokenPermissions);\n    }else{\n\t    myAppConsoleLog.error('in ' + fileName + ' : UnAuthorized accountID');\n\t    context.set('custErrMsg','in ' + fileName + ' : UnAuthorized accountID');\n\t\tcontext.reject('CustomError', 'GWICE400 UnAuthorized accountID');\n    }\n} catch (e) {\n    myAppConsoleLog.error('in ' + fileName + ' : ' + e);\n    context.set('custErrMsg','in insertCIFAccIdGwys : ' + e);\n\tcontext.reject('CustomError', 'GWISE500');\n}"
                - invoke:
                    version: 2.0.0
                    title: invoke
                    header-control:
                      type: blacklist
                      values: []
                    parameter-control:
                      type: whitelist
                      values: []
                    timeout: 60
                    verb: keep
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error:
                      - ConnectionError
                    target-url: $(backendURL)
  properties:
    target-url:
      value: 'http://example.com/operation-name'
      description: The URL of the target service
      encoded: false
    ace-all-acc-transaction-by-cif-url:
      value: >-
        http://actxnapi-http-ACENAMESPACE-CP4IDOMAIN/accounts/tran/v1/getTranList?
    ace-one-acc-transaction-url:
      value: >-
        http://actxnapi-http-ACENAMESPACE-CP4IDOMAIN/accounts/tran/v1/getAccountTran?
  application-authentication:
    certificate: true
  activity-log:
    enabled: true
    error-content: header
    success-content: activity
parameters: {}
tags: []
definitions:
  transactionListResponse:
    description: ''
    type: object
    properties:
      Data:
        type: object
        properties:
          Transaction:
            type: array
            items:
              type: object
              properties:
                AccountId:
                  type: string
                TransactionId:
                  type: string
                TransactionReference:
                  type: string
                Amount:
                  type: object
                  properties:
                    Amount:
                      type: string
                    Currency:
                      type: string
                CreditDebitIndicator:
                  type: string
                Status:
                  type: string
                BookingDateTime:
                  type: string
                ValueDateTime:
                  type: string
                TransactionInformation:
                  type: string
                BankTransactionCode:
                  type: object
                  properties:
                    Code:
                      type: string
                    SubCode:
                      type: string
                ProprietaryBankTransactionCode:
                  type: object
                  properties:
                    Code:
                      type: string
                    Issuer:
                      type: string
                Balance:
                  type: object
                  properties:
                    Amount:
                      type: object
                      properties:
                        Amount:
                          type: string
                        Currency:
                          type: string
                    CreditDebitIndicator:
                      type: string
                    Type:
                      type: string
      Links:
        type: object
        properties:
          Self:
            type: string
      Meta:
        type: object
    example: >-
      {"Data": {"Transaction": [{"AccountId": "22289", "TransactionId": "123", "TransactionReference": "Ref 1", "Amount": {"Amount": "10.00", "Currency": "GBP"}, "CreditDebitIndicator": "Credit", "Status": "Booked", "BookingDateTime": "2017-04-05T10:43:07+00:00", "ValueDateTime": "2017-04-05T10:45:22+00:00", "TransactionInformation": "Cash from Aubrey", "BankTransactionCode": {"Code": "ReceivedCreditTransfer", "SubCode": "DomesticCreditTransfer"}, "ProprietaryBankTransactionCode": {"Code": "Transfer", "Issuer": "AlphaBank"}, "Balance": {"Amount": {"Amount": "230.00", "Currency": "GBP"}, "CreditDebitIndicator": "Credit", "Type": "InterimBooked"} } ] }, "Links": {"Self": "https://api.alphabank.com/open-banking/v3.1/aisp/accounts/22289/transactions/"}, "Meta": {"TotalPages": 1, "FirstAvailableDateTime": "2017-05-03T00:00:00+00:00", "LastAvailableDateTime": "2017-12-03T00:00:00+00:00"} },      
paths:
  /transactions:
    get:
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/transactionListResponse'
      consumes: []
      produces: []
      security:
        # - UserOAuthSecurity:
        #     - account
        - AppSecret: []
          AppID: []
      operationId: retrieveAccountsForCIF
  '/accounts/{accountid}/transactions':
    get:
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/transactionListResponse'
      consumes: []
      produces: []
      security:
        # - UserOAuthSecurity:
        #     - account
        - AppSecret: []
          AppID: []
      operationId: retrieveAccountForAccId
    parameters:
      - name: accountid
        in: path
        required: true
        type: string
